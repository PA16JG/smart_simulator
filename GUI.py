# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import sqlite3      #sqlite3 module of python to use SQL statements
import cv2          #to import open cv for image processing
import numpy as np      # for processing image data




class Ui_SmartSimulator(object):
    def setupUi(self, SmartSimulator):
        SmartSimulator.setObjectName("SmartSimulator")
        SmartSimulator.resize(595, 316)

        self.photo = QtWidgets.QLabel(SmartSimulator)
        self.photo.setGeometry(QtCore.QRect(10, 80, 261, 171))
        self.photo.setText("")
        
        self.photo.setScaledContents(True)
        self.photo.setObjectName("photo")

        self.Evaluate = QtWidgets.QPushButton(SmartSimulator)
        self.Evaluate.setGeometry(QtCore.QRect(250, 280, 75, 23))
        self.Evaluate.setObjectName("Evaluate")

        self.label_3 = QtWidgets.QLabel(SmartSimulator)
        self.label_3.setGeometry(QtCore.QRect(310, 80, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")

        self.pushButton = QtWidgets.QPushButton(SmartSimulator)
        self.pushButton.setGeometry(QtCore.QRect(430, 30, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.element3 = QtWidgets.QLabel(SmartSimulator)
        self.element3.setGeometry(QtCore.QRect(440, 120, 141, 61))
        self.element3.setText("")
        
        self.element3.setScaledContents(True)
        self.element3.setObjectName("element3")

        self.element1 = QtWidgets.QLabel(SmartSimulator)
        self.element1.setGeometry(QtCore.QRect(290, 120, 141, 61))
        self.element1.setText("")
        
        self.element1.setScaledContents(True)
        self.element1.setObjectName("element1")

        self.element2 = QtWidgets.QLabel(SmartSimulator)
        self.element2.setGeometry(QtCore.QRect(290, 190, 141, 61))
        self.element2.setText("")
        
        self.element2.setScaledContents(True)
        self.element2.setObjectName("element2")

        self.label_6 = QtWidgets.QLabel(SmartSimulator)
        self.label_6.setGeometry(QtCore.QRect(440, 190, 141, 61))
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")

        self.widget = QtWidgets.QWidget(SmartSimulator)
        self.widget.setGeometry(QtCore.QRect(10, 30, 415, 22))
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)

        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton.clicked.connect(self.call)
        self.Evaluate.clicked.connect(self.show_img)

        self.retranslateUi(SmartSimulator)
        QtCore.QMetaObject.connectSlotsByName(SmartSimulator)
        

    def retranslateUi(self, SmartSimulator):
        _translate = QtCore.QCoreApplication.translate
        SmartSimulator.setWindowTitle(_translate("SmartSimulator", "Smart Simulator"))
        self.Evaluate.setText(_translate("SmartSimulator", "Evaluate"))
        self.label_3.setText(_translate("SmartSimulator", "Elements Found:"))
        self.pushButton.setText(_translate("SmartSimulator", "OK"))
        self.label.setText(_translate("SmartSimulator", "Enter the name of image to be simulated:"))

    def call(self):
        global pic
        pic = str(self.lineEdit.text())
        self.photo.setPixmap(QtGui.QPixmap("{}".format(pic)))
       
        MyData = sqlite3.connect('ImageSet.db') #connection object to connect to database
        curImg = MyData.cursor()            #cursor method as an event handler
        dataset= curImg.execute('''SELECT * FROM image''')
        
        global dict1, kay1, kay2, kay3
        dict1 ={}
        for x in dataset:   #to retrieve values from dataset
            image= x[2]     #Images Column
            name= x[1]      #Name Column
            var=x[3]        #Values Column
            unit=x[4]       #Units Column
            with open('{}.jpg'.format(name),'wb') as f:
                f.write(image)   #transforming images back to .jpg to be prcessed using open cv

            img = cv2.imread("{}".format(pic))   #storing user provided image in a variable
            gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #for image processing

            template=cv2.imread("{}.jpg".format(name), cv2.IMREAD_GRAYSCALE)   #using the templates retrieved above from respective column
            result = cv2.matchTemplate(gray_img, template, cv2.TM_CCOEFF_NORMED) #storing the result of comparison in a variable
            if np.any(result >= 0.9) == True:    #using numpy library to use if statement
                print("{} found. Value= {} {}".format(name,var,unit))   #printing the data as per template matched
                dict1['{}'.format(name)]=var                            #storing the values of circuit elements in dictionary for later use 
            else: print("No Other Element found")

    def show_img(self):
        self.element1.setPixmap(QtGui.QPixmap("Ammeter.jpg"))
        self.element2.setPixmap(QtGui.QPixmap("Resistor.jpg"))
        self.element3.setPixmap(QtGui.QPixmap("Voltage Source.jpg"))
        val= input("Do you wish to compute results? Y/N ")
        if val=='Y':
            Current=(dict1['Voltage Source']/dict1['Resistor'])         #for a simple circuit as this, we directly find current 
            print("Current={} amperes".format(Current))                 #displaying the result
        else:
            print("Terminated") 

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SmartSimulator = QtWidgets.QWidget()
    ui = Ui_SmartSimulator()
    ui.setupUi(SmartSimulator)
    SmartSimulator.show()
    sys.exit(app.exec_())
